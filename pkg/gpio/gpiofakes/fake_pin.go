// Code generated by counterfeiter. DO NOT EDIT.
package gpiofakes

import (
	"sync"

	rpio "github.com/stianeikeland/go-rpio"
	"github.com/xanderflood/pihub/pkg/gpio"
)

type FakePin struct {
	InputStub         func()
	inputMutex        sync.RWMutex
	inputArgsForCall  []struct{}
	OutputStub        func()
	outputMutex       sync.RWMutex
	outputArgsForCall []struct{}
	HighStub          func()
	highMutex         sync.RWMutex
	highArgsForCall   []struct{}
	LowStub           func()
	lowMutex          sync.RWMutex
	lowArgsForCall    []struct{}
	ReadStub          func() rpio.State
	readMutex         sync.RWMutex
	readArgsForCall   []struct{}
	readReturns       struct {
		result1 rpio.State
	}
	readReturnsOnCall map[int]struct {
		result1 rpio.State
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePin) Input() {
	fake.inputMutex.Lock()
	fake.inputArgsForCall = append(fake.inputArgsForCall, struct{}{})
	fake.recordInvocation("Input", []interface{}{})
	fake.inputMutex.Unlock()
	if fake.InputStub != nil {
		fake.InputStub()
	}
}

func (fake *FakePin) InputCallCount() int {
	fake.inputMutex.RLock()
	defer fake.inputMutex.RUnlock()
	return len(fake.inputArgsForCall)
}

func (fake *FakePin) Output() {
	fake.outputMutex.Lock()
	fake.outputArgsForCall = append(fake.outputArgsForCall, struct{}{})
	fake.recordInvocation("Output", []interface{}{})
	fake.outputMutex.Unlock()
	if fake.OutputStub != nil {
		fake.OutputStub()
	}
}

func (fake *FakePin) OutputCallCount() int {
	fake.outputMutex.RLock()
	defer fake.outputMutex.RUnlock()
	return len(fake.outputArgsForCall)
}

func (fake *FakePin) High() {
	fake.highMutex.Lock()
	fake.highArgsForCall = append(fake.highArgsForCall, struct{}{})
	fake.recordInvocation("High", []interface{}{})
	fake.highMutex.Unlock()
	if fake.HighStub != nil {
		fake.HighStub()
	}
}

func (fake *FakePin) HighCallCount() int {
	fake.highMutex.RLock()
	defer fake.highMutex.RUnlock()
	return len(fake.highArgsForCall)
}

func (fake *FakePin) Low() {
	fake.lowMutex.Lock()
	fake.lowArgsForCall = append(fake.lowArgsForCall, struct{}{})
	fake.recordInvocation("Low", []interface{}{})
	fake.lowMutex.Unlock()
	if fake.LowStub != nil {
		fake.LowStub()
	}
}

func (fake *FakePin) LowCallCount() int {
	fake.lowMutex.RLock()
	defer fake.lowMutex.RUnlock()
	return len(fake.lowArgsForCall)
}

func (fake *FakePin) Read() rpio.State {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct{}{})
	fake.recordInvocation("Read", []interface{}{})
	fake.readMutex.Unlock()
	if fake.ReadStub != nil {
		return fake.ReadStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.readReturns.result1
}

func (fake *FakePin) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakePin) ReadReturns(result1 rpio.State) {
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 rpio.State
	}{result1}
}

func (fake *FakePin) ReadReturnsOnCall(i int, result1 rpio.State) {
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 rpio.State
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 rpio.State
	}{result1}
}

func (fake *FakePin) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.inputMutex.RLock()
	defer fake.inputMutex.RUnlock()
	fake.outputMutex.RLock()
	defer fake.outputMutex.RUnlock()
	fake.highMutex.RLock()
	defer fake.highMutex.RUnlock()
	fake.lowMutex.RLock()
	defer fake.lowMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePin) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gpio.Pin = new(FakePin)
